#!/bin/bash

rm -f report.log
if [ -r report.log ]; then echo "Assert: report.log still present though this script tried to delete it!"; exit 1; fi

export TEXT=
MYEXTRA_OPT=
if [[ "${PWD}" == *"ASAN"* ]]; then
  if [ -z "${1}" -o -z "${2}" ]; then
    echo "Assert: ASAN build is being used, yet no options were passed."
    echo "To check for an ASAN/UBSAN bug, do:  ~/b ASAN 'bug_to_look_for'"
    echo "Where bug_to_look for is the ASAN/UBSAN string to look for in the error log. Note that a generic 'runtime error:' can be used for UBSAN and a generic '=ERROR:' for ASAN, though it is likely better to set a more specific string"
    exit 1
  fi
fi
if [ "${1}" == "ASAN" ]; then
  if grep -qi "ASAN" ../REGEX_EXCLUDE; then 
    echo "Assert: remove ASAN from ../REGEX_EXCLUDE"
    exit 1
  fi
  export TEXT="${2}"
  # MYEXTRA_OPT="$(echo "${MYEXTRA_OPT}" | sed 's|ASAN||;s|${TEXT}||')"
  MYEXTRA_OPT="$3 $4 $5 $6 $7 $8 $9"
  ~/mariadb-qa/bug_report.sh ASAN "${MYEXTRA_OPT}" | tee report.log
else
  MYEXTRA_OPT="$*"
  #sed -i 's|^TEXT="[^"]\+"|TEXT=""|' ~/mariadb-qa/bug_report.sh  # Ensure we're looking for core files, not specific bugs for which bug_report.sh may have been updated
  sed -i 's|^TEXT="[^"]\+"|TEXT="got signal"|' ~/mariadb-qa/bug_report.sh  # New test as of 3/11/20: ensure we're looking for 'got signal', as cores do not always seem to be generated in MD (long standing issue, source unclear).
  rm -Rf ../MD*/data.PREV ../MS*/data.PREV  # Avoid data.PREV cores from being picked up
  ~/mariadb-qa/bug_report.sh "${MYEXTRA_OPT}" | tee report.log
  sed -i 's|^TEXT="[^"]\+"|TEXT=""|' ~/mariadb-qa/bug_report.sh  # Cleanup
  ~/tt | grep -A1 "URL" | tee -a report.log
  echo 
  if [ -r ../allstrings_merged ]; then
    cd .. && ./allstrings_merged && cd - >/dev/null 2>&1
  fi
fi
