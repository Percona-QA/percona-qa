#!/bin/bash
set +H  # Disables history substitution and avoids  -bash: !: event not found  like errors

NOPERL=0
perl --version >/dev/null 2>&1
if [ $? -ne 0 ]; then echo "This script requires perl, please install it"; NOPERL=1; fi

noformat_strings(){
  echo "----- Handy extra noformat strings -----"
  MYSQLD=
  if [ -z "${MYSQLD}" ]; then
    if [ -r ./bin/mysqld -a ! -d ./bin/mysqld ]; then  # For direct use in BASEDIR, like ~/tt
      MYSQLD="./bin/mysqld"
    elif [ -r ../mysqld -a ! -d ../mysqld ]; then  # Not currently used, but provisioned alike to ~/t
      MYSQLD="../mysqld"
    elif [ -r ../mysqld/mysqld -a ! -d ../mysqld/mysqld ]; then  # For direct use inside trial directories
      MYSQLD="../mysqld/mysqld"
    fi
  fi
  if [ ! -z "${MYSQLD}" ]; then
    SOURCE_CODE_REV="$(grep -om1 --binary-files=text "Source control revision id for MariaDB source code[^ ]\+" ${MYSQLD} 2>/dev/null | tr -d '\0' | sed 's|.*source code||;s|Version||')"
    SERVER_VERSION="$(${MYSQLD} --version | grep -om1 '[0-9\.]\+-MariaDB' | sed 's|-MariaDB||')"
    LAST_THREE="$(echo "${PWD}" | sed 's|.*\(...\)$|\1|')"
    BUILD_TYPE=
    if [ "${LAST_THREE}" == "opt" ]; then BUILD_TYPE=" (Optimized)"; fi
    if [ "${LAST_THREE}" == "dbg" ]; then BUILD_TYPE=" (Debug)"; fi
    echo "{noformat:title=${SERVER_VERSION} ${SOURCE_CODE_REV}${BUILD_TYPE}}"
    echo ""
    echo "{noformat}"
  fi
}

TEXT="$(~/t)"
if [[ "${TEXT}" == *"no core file found"* ]]; then 
  echo "Assert: no core file found in */*core*"
  #echo $-
  noformat_strings
  exit 1
fi

echo "----- Bug String  -----"
echo "${TEXT}"

echo "----- String Scan -----"
FRAMEX="$(echo "${TEXT}" | sed 's/.*|\(.*\)|.*|.*$/\1/')"
OUT="$(grep -Fi --binary-files=text "${TEXT}" ~/mariadb-qa/known_bugs.strings)"
OUT2="$(grep -Fi --binary-files=text "${FRAMEX}" ~/mariadb-qa/known_bugs.strings)"
if [ -z "${OUT}" ]; then
  if [ -z "${OUT2}" ]; then 
    echo "BUG NOT FOUND IN KNOWN BUGS LIST! POTENTIALLY NEW BUG; SEARCH FIRST:"
  else 
    echo "BUG NOT FOUND (IDENTICALLY) IN KNOWN BUGS LIST! HOWEVER, A PARTIAL MATCH BASED ON THE 1st FRAME ('${FRAMEX}') WAS FOUND, AS FOLLOWS: (PLEASE CHECK IT IS NOT THE SAME BUG):"
    echo "${OUT2}"
  fi
else
  echo "ALREADY KNOWN BUG!"
  echo "${OUT}"
fi

echo "----- Search URL (3 significant frames) -----"  # First frame (FRAMEX): ref code above
FRAMEY="$(echo "${TEXT}" | sed 's/.*|\(.*\)|.*$/\1/')"
FRAMEZ="$(echo "${TEXT}" | sed 's/.*|\(.*\)$/\1/')"
echo "https://jira.mariadb.org/issues/?jql=text%20~%20%22%5C%22${FRAMEX}%5C%22%22%20and%20text%20~%20%22%5C%22${FRAMEY}%5C%22%22%20and%20text%20~%20%22%5C%22${FRAMEZ}%5C%22%22%20ORDER%20BY%20status%20ASC"

ASSERT="$(echo -n "${TEXT}" | sed 's/||/DUMMYREP/g' | sed 's/|.*//' | sed 's/DUMMYREP/||/g;')"
if [[ "${ASSERT}" != "SIGSEGV" && "${ASSERT}" != "SIGABRT" ]]; then
  echo "----- Search URL (assert message) -----"
  if [ ${NOPERL} -eq 0 ]; then  # Properly escape all special characters to generate a correct URL
    ASSERT="$(echo -n "${ASSERT}" | perl -MURI::Escape -le 'print uri_escape <STDIN>')"
  fi
  echo "https://jira.mariadb.org/issues/?jql=text%20~%20%22%5C%22${ASSERT}%5C%22%22%20ORDER%20BY%20status%20ASC"
fi

noformat_strings

exit 0
