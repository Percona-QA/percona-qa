#!/bin/bash
# Created by Roel Van de Paar, MariaDB

MYEXTRA_OPT="$*"
SCRIPT_PWD=$(cd `dirname $0` && pwd)

if [ ! -r bin/mysqld ]; then
  echo "Assert: bin/mysqld not available, please run this from a basedir which had the SQL executed against it an crashed"
  exit 1
fi

if [ ! -r ../test_all ]; then
  echo "Assert: ../test_all not available - incorrect setup or structure"
  exit 1
fi

if [ ! -r ../gendirs.sh ]; then
  echo "Assert: ../gendirs.sh not available - incorrect setup or structure"
  exit 1
fi

if [ ! -r ./in.sql ]; then
  echo "Assert: ./in.sql not available - incorrect setup or structure"
  exit 1
fi

echo 'Starting bug report generation for this SQL code (please check):'
echo '----------------------------------------------------------------'
cat in.sql
echo '----------------------------------------------------------------'
sleep 1

RANDOM=`date +%s%N | cut -b14-19`  # Random entropy init
RANDF=$(echo $RANDOM$RANDOM$RANDOM$RANDOM | sed 's|.\(..........\).*|\1|')  # Random 10 digits filenr

grep 'mysqld options required for replay:' ./in.sql | sed 's|.*mysqld options required for replay:[ ]||' > /tmp/options_bug_report.${RANDF}
echo ${MYEXTRA_OPT} >> /tmp/options_bug_report.${RANDF}
MYEXTRA_OPT_CLEANED=$(cat /tmp/options_bug_report.${RANDF} | sed 's|  | |g' | tr ' ' '\n' | sort -u | tr '\n' ' ')
echo "Using the following options: ${MYEXTRA_OPT_CLEANED}"

./all_no_cl ${MYEXTRA_OPT_CLEANED}
./test
./stop; sleep 0.2; ./kill 2>/dev/null; sleep 0.2

CORE_COUNT=$(ls data/*core* 2>/dev/null | wc -l)
if [ ${CORE_COUNT} -eq 0 ]; then
  echo "INFO: no cores found at data/*core*"
elif [ ${CORE_COUNT} -gt 1 ]; then
  echo "Assert: too many (${CORE_COUNT}) cores found at data/*core*, this should not happen (as ./all_no_cl was used which should have created a clean data directory)"
  exit 1
else
  gdb -q bin/mysqld $(ls data/*core*) >/tmp/${RANDF}.gdba 2>&1 << EOF
   set pagination off
   bt
   quit
EOF
fi

rm -f ../in.sql
if [ -r ../in.sql ]; then echo "Assert: ../in.sql still available after it was removed!"; exit 1; fi
cp in.sql ..
if [ ! -r ../in.sql ]; then echo "Assert: ../in.sql not available after copy attempt!"; exit 1; fi
cd ..
echo "Testing all..."
./test_all ${MYEXTRA_OPT_CLEANED}
CORE_COUNT_ALL=$(./gendirs.sh | xargs -I{} echo "ls {}/data/*core* 2>/dev/null" | xargs -I{} bash -c "{}" | wc -l)
cd -

SOURCE_CODE_REV="$(grep -om1 --binary-files=text "Source control revision id for MariaDB source code[^ ]\+" bin/mysqld 2>/dev/null | tr -d '\0' | sed 's|.*source code||;s|Version||')"
SERVER_VERSION="$(bin/mysqld --version | grep -om1 '[0-9\.]\+-MariaDB' | sed 's|-MariaDB||')"

echo '-------------------- BUG REPORT --------------------'
echo '{noformat}'
cat ./in.sql
echo -e '{noformat}\n'
echo -e 'Leads to:\n'
# Assumes (which is valid for the pquery framework) that 1st assertion is also the last in the log
ERROR_LOG=$(ls log/master.err 2>/dev/null | head -n1)
if [ ! -z "${ERROR_LOG}" ]; then
  ASSERT="$(grep --binary-files=text -m1 'Assertion.*failed.$' ${ERROR_LOG} | head -n1)"
  if [ ! -z "${ASSERT}" ]; then
    echo -e "{noformat:title=${SERVER_VERSION} ${SOURCE_CODE_REV}}\n${ASSERT}\n{noformat}\n"
  fi
fi

echo "{noformat:title=${SERVER_VERSION} ${SOURCE_CODE_REV}}"
grep -A999 'Core was generated by' /tmp/${RANDF}.gdba | grep -v '^(gdb)[ \t]*$' | grep -v '^[0-9]\+.*No such file or directory.$' | sed 's|(gdb) (gdb) |(gdb) bt\n|'
echo -e '{noformat}\n'
if [ -r ../test.results ]; then
  cat ../test.results
fi
echo '-------------------- /BUG REPORT --------------------'
echo "TOTAL CORES SEEN ACCROSS ALL VERSIONS: ${CORE_COUNT_ALL}"
if [ ${CORE_COUNT_ALL} -gt 0 ]; then
  echo 'Remember to action:'
  echo '1) If no engine is specified, add ENGINE=InnoDB'
  echo '2) Double check noformat version strings for non-10.5 issues'
  echo '3) Add bug to known.strings'
  echo '4) Check for duplicates before logging bug:'
  FIRSTFRAME=$(${SCRIPT_PWD}/new_text_string.sh FRAMESONLY | sed 's/|.*//')
  echo "https://jira.mariadb.org/browse/MDEV-0?jql=text%20~%20%22%5C%22${FIRSTFRAME}%5C%22%22"  # Chrome/FF will automatically translate non-url chars in the FIRSTFRAME var
  echo "https://www.google.com/search?q=site%3Amariadb.org+%22${FIRSTFRAME}%22"  # Idem
fi
