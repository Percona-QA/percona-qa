use GenTest::Constants;
use GenTest::Grammar;

# Configuration file template for  util/bughunt.pl
#
# Please
# - copy this file to for example 1.cfg and
# - adjust the settings so that they fit to your usage case and
#   environment
#

{

# desired_status_codes
#---------------------
# List of expected status codes.
# Status codes are described in lib/GenTest/Constants.pm
# STATUS_ANY_ERROR means that any RQG error would cause the
# simplification to continue, e.g. both deadlocks and crashes will be
# considered together.
#

   desired_status_codes => [+STATUS_ANY_ERROR],

# expected_output
#----------------
# List of string patterns which all need to occur within the RQG output
# after a successful simplification. The search patterns are usually
# derived from a backtrace.
# Example 1:
#   Starting point is a crash of a server which was compiled with debug.
#    @expected_output =>
#    [
#      'mysql_execute_command .* at sql_parse.cc\:4441',
#      'mysql_parse .* at sql_parse.cc\:5991',
#      'dispatch_command .* at sql_parse.cc\:1074'
#    ];
#   Please be careful when using source file line numbers in search patterns
#   - They increase the selectivity of the search.
#   - There is a significant risk that the line numbers do no more fit
#     if the source code of the server gets changed.
# Example 2:
#   Starting point is a crash of a server which was compiled without debug.
#    expected_output => [
#       '0x0000000000413f61',
#       '0x00000000004429a0',
#       '0x0000000000453f0f'
#    ]
#    Just some adresses looks ugly but it works quite good.
# Example 3:
#   If just hunt for some status code ( -> desired_status_codes ) use
#    expected_output => [ ]

   expected_outputs => [ '' ],

# initial_grammar_file
#---------------------
# File which should be used as the base for the simplification process.

   grammar => 'conf/replication-dml_sql.yy',

# rqg_options
#------------
# runall.pl (RQG) options which should be used

   rqg_options => {
      basedir  => '/work2/5.1/mysql-5.1-rep+3/',
      rpl_mode => 'mixed',
      threads  => 10,
      queries  => 10000,
      duration => 1200,
      reporter => 'Deadlock,Backtrace,ErrorLog',
      gendata  => 'conf/replication-dml_data.zz'
   },

# Mysqld options
#---------------
# Mysql server options passed to RQG in addition to the rqg_options

   mysqld => {
      'loose-innodb-lock-wait-timeout' => 1,
      'table-lock-wait-timeout'        => 1,
      'log-output'                     => 'file',
      'plugin-dir'                     => '/work2/5.1/mysql-5.1-rep+3/plugin/semisync/.libs',
      'plugin-load'                    => 'rpl_semi_sync_master=libsemisync_master.so:rpl_semi_sync_slave=libsemisync_slave.so',
      'rpl_semi_sync_master_enabled'   => 1,
      'rpl_semi_sync_slave_enabled'    => 1
   },

# trials
#-------
# This is the number of times the oracle() will run the RQG in order to get to
# the desired status code and/or desired strings (expected_output).
# If the error is sporadic, several runs may be required to know if the bug
# is still present in the simplified grammar or not.
# The "seed" value gets incremented per trial.

   trials => 50,

# search_var_size
#----------------
# Number of bytes (counted from the end of the output file) to be used during
# search for expected_output We suck the last "search_var_size" Bytes of the file
# to be searched into a variable.
# A too huge "search_var_size" could cause problems.
# The relevant zone within the file is maybe
# - smaller
#   If our search pattern is unfortunately a bit unspecific and if it
#   could also occur within irrelevant zones of the file than we might
#   get false positives. Decreasing "search_var_size" might help.
# - bigger
#   We might get false negatives. Increasing "search_var_size" might
#   help but I am unsure if any OS and PERL implementation supports
#   such a monstrous variable.

   search_var_size => 1000000,

# initial_seed
#-------------
# Initial seed value to use. This increases the likelihood that the RQG run
# with the initial grammar reaches the desired result.

   initial_seed => 1,

# vardir_prefix
#--------------
# "Server activity" should happen in "vardir" which is a subdirecty of
# "vardir_prefix".
# Important points are:
# - free space within the filesystem
# - performance of the filesystem
# Simplification gets a significant speed up if we could use a memory
# based filesystem.

   vardir_prefix => '/dev/shm',

# storage_prefix
#---------------
# Grammars and logs of the simplification process get stored within a
# subdirectory of "storage_prefix".

   storage_prefix => './storage'

}
