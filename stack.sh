#!/bin/bash
RANDOM=$(date +%s%N | cut -b10-19)  # Random entropy init
RANDF=$(echo $RANDOM$RANDOM$RANDOM$RANDOM | sed 's|.\(..........\).*|\1|')  # Random 10 digits filenr

BIN=
if [ -r ./bin/mysqld ]; then BIN='./bin/mysqld'; fi
if [ -z "${BIN}" -a -r ../mysqld/mysqld ]; then BIN='../mysqld/mysqld'; fi
if [ -z "${BIN}" ]; then echo "Assert: bin/mysqld not found!" exit 1; fi

SOURCE_CODE_REV="$(grep -om1 --binary-files=text "Source control revision id for MariaDB source code[^ ]\+" ${BIN} 2>/dev/null | tr -d '\0' | sed 's|.*source code||;s|Version||;s|version_source_revision||')"
SERVER_VERSION="$(${BIN} --version | grep -om1 '[0-9\.]\+-MariaDB' | sed 's|-MariaDB||')"
LAST_THREE="$(echo "${PWD}" | sed 's|.*\(...\)$|\1|')"
BUILD_TYPE=
if [ "${LAST_THREE}" == "opt" ]; then BUILD_TYPE=" (Optimized)"; fi
if [ "${LAST_THREE}" == "dbg" ]; then BUILD_TYPE=" (Debug)"; fi

CORE_COUNT=$(ls data/*core* 2>/dev/null | wc -l)
if [ ${CORE_COUNT} -eq 0 ]; then
  echo "INFO: no cores found at data/*core*"
  exit 1
elif [ ${CORE_COUNT} -gt 1 ]; then
  echo "Assert: too many (${CORE_COUNT}) cores found at data/*core*, this should not happen (as ./all_no_cl was used which should have created a clean data directory)"
  exit 1
fi

ERROR_LOG=$(ls log/master.err 2>/dev/null | head -n1)
if [ ! -z "${ERROR_LOG}" ]; then
  ASSERT="$(grep --binary-files=text -m1 'Assertion.*failed.$' ${ERROR_LOG} | head -n1)"
  if [ -z "${ASSERT}" ]; then
    ASSERT="$(grep --binary-files=text -m1 'Failing assertion:' ${ERROR_LOG} | head -n1)"
  fi
  if [ ! -z "${ASSERT}" ]; then
    echo -e "{noformat:title=${SERVER_VERSION} ${SOURCE_CODE_REV}${BUILD_TYPE}}\n${ASSERT}\n{noformat}\n"
  fi
fi

gdb -q ${BIN} $(ls data/*core*) >/tmp/${RANDF}.gdba 2>&1 << EOF
 set pagination off
 set print pretty on
 set print frame-arguments all
 bt
 quit
EOF
if [ -r /tmp/${RANDF}.gdba ]; then
  echo "{noformat:title=${SERVER_VERSION} ${SOURCE_CODE_REV}${BUILD_TYPE}}"
  grep --binary-files=text -A999 'Core was generated by' /tmp/${RANDF}.gdba | grep --binary-files=text -v '^(gdb)[ \t]*$' | grep --binary-files=text -v '^[0-9]\+.*No such file or directory.$' | sed 's|(gdb) (gdb) |(gdb) bt\n|' | sed 's|(gdb) (gdb) ||'
  rm -f /tmp/${RANDF}.gdba
else
  echo "Assert: /tmp/${RANDF}.gdba not found after gdb was called"
  exit 1
fi
echo '{noformat}'
